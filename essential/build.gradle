apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

ext {
    bintrayRepo = 'Essentials' // your repo name
    bintrayName = 'android-essentials' // has to be same as your library module name
    publishedGroupId = 'com.ancient.essentials' // your module package name
    libraryName = 'android-essentials'
    artifact = 'android-essentials' // has to be same as your library module name
    libraryDescription = 'Base essential components for android application to quick start.'
    siteUrl = 'https://github.com/naveenkumarn27/android-essentials'
    gitUrl = 'https://github.com/naveenkumarn27/android-essentials.git'
    libraryVersion = '1.0.0'
    developerId = 'naveenkumarn27'
    developerName = 'Naveen Kumar Kuppan'
    developerEmail = 'naveenkumarn2@gmail.com'
    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}


android {
    compileSdkVersion rootProject.ext.sdk.compile
    buildToolsVersion rootProject.ext.sdk.build_tool

    defaultConfig {

        minSdkVersion rootProject.ext.sdk.min
        targetSdkVersion rootProject.ext.sdk.max

        versionCode rootProject.ext.app.code
        versionName rootProject.ext.app.name

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }

    dataBinding {
        enabled = true
    }

    buildTypes {

        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Kotlin support libs
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$plugin.kotlin"

    // Extensions = ViewModel + LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:$libs.lifecycle"
    kapt "androidx.lifecycle:lifecycle-compiler:$libs.lifecycle"

    // Android support libs
    implementation "com.google.android.material:material:$libs.material"
    implementation "androidx.appcompat:appcompat:$libs.appcompat"
    implementation "androidx.constraintlayout:constraintlayout:$libs.constraint"
    implementation "androidx.core:core-ktx:$libs.core"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:$libs.refresh"

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

apply plugin: 'com.github.dcendents.android-maven'

group = publishedGroupId                               // Maven Group ID for the artifact

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'
                groupId publishedGroupId
                artifactId artifact

                // Add your description here
                name libraryName
                description libraryDescription
                url siteUrl

                // Set your license
                licenses {
                    license {
                        name licenseName
                        url licenseUrl
                    }
                }
                developers {
                    developer {
                        id developerId
                        name developerName
                        email developerEmail
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl

                }
            }
        }
    }
}

apply plugin: 'com.github.dcendents.android-maven'

group = publishedGroupId                               // Maven Group ID for the artifact

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'
                groupId publishedGroupId
                artifactId artifact

                // Add your description here
                name libraryName
                description libraryDescription
                url siteUrl

                // Set your license
                licenses {
                    license {
                        name licenseName
                        url licenseUrl
                    }
                }
                developers {
                    developer {
                        id developerId
                        name developerName
                        email developerEmail
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl

                }
            }
        }
    }
}

apply plugin: 'com.jfrog.bintray'

version = libraryVersion

// Bintray
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = ['archives']
    pkg {
        repo = bintrayRepo
        name = bintrayName
        desc = libraryDescription
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = allLicenses
        publish = true
        publicDownloadNumbers = true
        version {
            desc = libraryDescription
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = properties.getProperty("bintray.gpg.password")
                //Optional. The passphrase for GPG signing'
            }
        }
    }
}
